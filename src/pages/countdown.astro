---
import Layout from '@/layouts/Layout.astro';

const baseClasses = {
  wrapper: "",
  group: "flex flex-col items-center justify-center",
  digit: "text-5xl text-primary font-bold",
  label: "text-sm text-secondary uppercase tracking-wide"
};


const variantClasses = {
  clock: {
    wrapper: "grid grid-cols-4 gap-4 text-center",
    group: "relative",
    digit: "top-center text-6xl font-extrabold",
    label: "mt-1 text-xs opacity-70"
  },
  inline: {
    wrapper: "flex items-center justify-center space-x-1 text-lg font-semibold",
    group: "flex items-center",
    digit: "inline-block",
    label: "ml-1"
  }
};

---

<Layout class="!relative !w-[100vw] !h-[100vh]">
    <div
        class="absolute top-1/2 left-1/2 mt-56
        
        "
        id="countdown-wrapper"
        data-target={new Date(2025, 12, 25)}
        data-format={"clock"}
    >
    <!-- Días -->
    <div class="">
        <span class="" id="days">00</span>
        <span class="">
        {"clock" === "clock" ? "Días" : "D"}
        </span>
    </div>
    <!-- Días -->

    <!-- Horas -->
    <div class="">
        <span class="" id="hours">00</span>
        <span class="">
        {"clock" === "clock" ? "Horas" : ":"}
        </span>
    </div>
    <!-- Horas -->

    <!-- Minutos -->
    <div class="">
        <span class="" id="minutes">00</span>
        <span class="">
        {"clock" === "clock" ? "Minutos" : ":"}
        </span>
    </div>
    <!-- Minutos -->

    <!-- Segundos -->
    <div class="">
        <span class="" id="seconds">00</span>
        <span class="">
        {"clock" === "clock" ? "Segundos" : ""}
        </span>
    </div>
    <!-- Segundos -->
        
    <canvas id="confetti-canvas" />
    </div>
</Layout>

<script>
  import { throwConfettiByCanvas } from "@/utils/confetti";

  const wrapper = document.getElementById("countdown-wrapper") as HTMLDivElement;
  const canvas = document.getElementById("confetti-canvas") as HTMLCanvasElement;

  const secondMeter = document.getElementById("seconds") as HTMLSpanElement;
  const minuteMeter = document.getElementById("minutes") as HTMLSpanElement;
  const hourMeter = document.getElementById("hours") as HTMLSpanElement;
  const dayMeter = document.getElementById("days") as HTMLSpanElement;

  /** UTC Offset ej:
   * España: 25/12/2025 18:00:00 (6pm)  UTC+2
   * México: 25/12/2025 10:00:00 (10am) UTC-6
   */ 
  if (!wrapper.dataset.target) {
    throw new Error(" [!] Countdown Error: | data-target={targetDate} isn't defined |... ");
  }
  const target = new Date(wrapper.dataset.target);
  const format = wrapper.dataset.format;
  
  let isFinished = false;
  setInterval(() => {
    if (isFinished) return;

    const now = new Date();
    const diffMs = target.getTime() - now.getTime() - 2_678_400_000;
    
    console.log(diffMs)

    if (diffMs <= 0) {
      isFinished = true;
      throwConfettiByCanvas(canvas);

      secondMeter.innerText = "00";
      minuteMeter.innerText = "00";
      hourMeter.innerText = "00";
      dayMeter.innerText = "00";

      return;
    }

    // 1_000        : Segundo
    // 60_000       : Minuto
    // 3_600_000    : Hora
    // 86_400_000   : Día
    const days = Math.floor(diffMs / 86_400_000);
    const hours = Math.floor((diffMs / 3_600_000) % 24);
    const minutes = Math.floor((diffMs / 60_000) % 60);
    const seconds = Math.floor((diffMs / 1_000) % 60);

    dayMeter.innerText = format === "clock"
      ? String(days).padStart(2, "0")
      : `${days}D`// Formato inline (91D 08:30:00)
    ;
    hourMeter.innerText = String(hours).padStart(2, "0");
    minuteMeter.innerText = String(minutes).padStart(2, "0");
    secondMeter.innerText = String(seconds).padStart(2, "0");
  }, 1000);
</script>
